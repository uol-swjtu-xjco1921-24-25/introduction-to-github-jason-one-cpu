import unittest
import subprocess

class TestMazeGame(unittest.TestCase):
    # Test 1: Command line arguments are missing
    def test_missing_argument(self):
        result = subprocess.run(["./maze"], capture_output=True)
        self.assertNotEqual(result.returncode, 0)
        self.assertIn("Usage", result.stderr.decode())

    # Test 2: The maze file does not exist
    def test_invalid_file(self):
        result = subprocess.run(["./maze", "test_data/mazes/nonexistent.txt"], capture_output=True)
        self.assertEqual(result.returncode, 1)


    class TestMazeGame(unittest.TestCase):
    # Test 3: Maze size less than 5
    def test_maze_too_small(self):
        result = subprocess.run(
            ["./maze", "test_data/mazes/invalid_size.txt"],
            capture_output=True,
            text=True
        )
        # Check if the program returns a non-0 exit code (indicating an error)
        self.assertNotEqual(result.returncode, 0)
        # Check if the error message contains "size" or "invalid"
        self.assertIn("size", result.stderr.lower() or "invalid", result.stderr.lower())

    # Test 4: The maze is not rectangular (inconsistent lines)
    def test_maze_not_rectangle(self):
        result = subprocess.run(
            ["./maze", "test_data/mazes/invalid_shape.txt"],
            capture_output=True,
            text=True
        )
        self.assertNotEqual(result.returncode, 0)
        self.assertIn("rectangle", result.stderr.lower())

if __name__ == '__main__':
    unittest.main()